package com.jit.swip;import android.os.Bundle;import android.view.GestureDetector;import android.view.GestureDetector.OnGestureListener;import android.view.KeyEvent;import android.view.MotionEvent;import com.jit.swip.widget.SwipeBackLayout;import com.jit.swip.widget.app.SwipeBackActivity;/** *  * 全局Activity的基类，主要实现了两个返回功能： * 1、当手势落在界面的左侧，随手势滑动而滑动的侧滑返回，比如腾讯微博，相对高大上一点 * 2、手指落在都可以，当X坐标的位移大于屏幕宽度1/3并且Y坐标位移的绝对值不大于60dp，比如QQ、新浪微博 * */public class BaseActivity extends SwipeBackActivity {		//随手势滑动而滑动的Activity界面	private SwipeBackLayout mSwipeBackLayout;	//随手势返回的处罚方位，有EDGE_LEFT、EDGE_RIGHT、EDGE_BOTTOM、EDGE_ALL	//一般选择自左侧返回	private final int edgeFlag = SwipeBackLayout.EDGE_LEFT;		//手势监听类，负责监听手指滑动的位置和速率	protected GestureDetector mDetector;	//手势滑动在横坐标的位置阀值，设置为屏幕宽度的三分之一	private float xThreshold;	//手势滑动在宗坐标的位置阀值，设置为20dp	private float yThreshold;	@Override	protected void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);				//实现第一种返回方式，这样就OK了		mSwipeBackLayout = getSwipeBackLayout();		mSwipeBackLayout.setEdgeTrackingEnabled(edgeFlag);				//实现第二种返回功能，逻辑写在回调监听里		mDetector = new GestureDetector(this, mGestureListener);		xThreshold = DensityUtil.getWidthInPx(this) / 3;		yThreshold = DensityUtil.dip2px(this, 20);	}		@Override	public boolean dispatchTouchEvent(MotionEvent ev) {		super.dispatchTouchEvent(ev);		mDetector.onTouchEvent(ev);		return true;	}	//手势滑动的回调监听器	private OnGestureListener mGestureListener = new GestureListenerImp() {		@Override		public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX,				float velocityY) {			if (e1 != null && e2 != null) {				//手指横坐标上的位移				int deltaX = (int) (e2.getX() - e1.getX());				//手指纵坐标的位移绝对值，主要为了防范Y坐标对X坐标的影响				int deltaY = Math.abs((int) (e2.getY() - e1.getY()));				if ((deltaX > xThreshold) && (deltaY < yThreshold)) {										// Scroll out contentView and finish the activity					scrollToFinishActivity();				}			}			return false;		}	};		@Override	public boolean onKeyDown(int keyCode, KeyEvent event) {		if (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {			scrollToFinishActivity();		}		return false;	}	private static class GestureListenerImp implements OnGestureListener {		@Override		public boolean onDown(MotionEvent e) {			return false;		}		@Override		public void onShowPress(MotionEvent e) {					}		@Override		public boolean onSingleTapUp(MotionEvent e) {			return false;		}		@Override		public boolean onScroll(MotionEvent e1, MotionEvent e2,				float distanceX, float distanceY) {			return false;		}		@Override		public void onLongPress(MotionEvent e) {					}		@Override		public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX,				float velocityY) {			return false;		}			}}